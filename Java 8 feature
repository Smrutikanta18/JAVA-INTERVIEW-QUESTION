                        1. STREAM API
                      `````````````````
1. Stream API is used to perform operation or process the group of object.
    It is related to the Collection Framework.
2. STREAM API VS IOSTREAM
        Stream API basically used to perform operation on collection 
          or on a group of data.
       IOStream is baically a sequence of data that is used to perform 
          read and write operation.

    java create 3 stream automatically --
                                      System.out
                                      System.in
                                      System.error
        System.out: it is used to print the output.
                    method conatin: print()
                                    println()
        System.in: it is used to read input from input stream.
                    it is use to take input from keyboard 
                  in Scanner class object.
        system.error: used to print error.

3. CHARACTERISTICS AND FEATURE OF STREAM API 
      i. Provide immutable operation :
            It does not change the source data. It only use 
          source data create a new stream and also return a
          new stream and does not affect the source data.

          EX: 
            List<Integer> l = Arrays.ofList(1,2,3,4,5);
            List<Integer> s= l.stream()
                                    .map(n -> n * 2)
                                    .collect(Collectors.toList());
            s.o.p(l);
            s.o.p(s);

      ii. They donot perform operation util a terminate operation 
          method it not called.

      iii. It uses lambda Expression and functional interface to 
          to make code readable.
          EX:
            l.stream()
                    .map(n->n*2)
                    .forEach(s -> s.o.p(s));

      iv. Once a stream is consumed then it canot be used again.

      v.Stream operation can be chained together so that one method
        output is used as the another method input.
        EX: 
          l.stream()
                  .filter(n -> n%2 == 0)
                  .map(n -> n*2)
                  .sorted()
                  .forEach(System.out::println);

      vi. It provide the special stream for primitive datatype
            IntStream, LongStream etc.
            IntStream is = IntStream.range(1,10);
            int sum = is.sum();

4. OPERATION ON STREAM
    There is only to type of operation in stream API
        i. Intermidiate Operation
       ii. Terminate Operation 

Intermidiate Operation :
    Operation in which the multiple operation are chained together
    in a row called Intermidiate Operation.

    Characteristic:
      i. In this multiple operation are chained together and one operation 
        output is used as the input of another operation.
      ii. This operation transfer a stream into another stream.

    Methods:
    i. map() :
          This stream method used to transfer each element of 
        the stream.
          it take a FUnction that is Functional interface as 
          parameter.
          it return a new stream consisting of the result of the applying 
          operation/function on the existing stream element.

        EX:
            List<Integer> l = Arrays.ofList(1,2,3,4,5);
            List<Integer> s= l.stream()
                                    .map(n -> n * 2)
                                    .collect(Collectors.toList());
            s.o.p(l);
            s.o.p(s);

    ii. filter() :
          It is the stream method that filter the element based on the condition.
        cretae a new stream containing only the satified element from that stream.

        EX:
            List<Integer> l = Arrays.ofList(1,2,3,4,5);
            l.stream()
                    .filter(n -> n % 2 != 0)
                    .forEach(System.out::println);
            s.o.p(l);

     iii. sorted() :
            This stream method is used to sort the element of the stream
          and return a sorted stream.

     iv. limit(Long l) : Limit the stream to the l.
      v. distinct() : Remove the duplicate element from the stream.
     vi.skip(Long n): TO skip the first n element from the stream.

Terminate Operation
    Operation that return the final result of the stream operation
  is called Terminate operation.

methods: 
    i. collect() :
            it return the result stream.
            EX:
            List<Integer> l = Arrays.ofList(1,2,3,4,5);
            List<Integer> s= l.stream()
                                    .map(n -> n * 2)
                                    .collect(Collectors.toList());
            s.o.p(l);
            s.o.p(s);
    ii. forEach() :  
              it retrive all the element of steam and 
            print it.
            EX:
             List<Integer> l = Arrays.ofList(1,2,3,4,5);
            l.stream()
                    .filter(n -> n % 2 != 0)
                    .forEach(System.out::println);
            
    iii. count() : 
                it count the number of element present in stream.
    iv. findFirst() :
                Return the first element of the stream.
                  EX:
                   List<Integer> l = Arrays.ofList(1,2,3,4,5);
                 Inetegr i = l.stream()
                    .map(n -> n * 2 )
                    .findFirst();
             s.o.p(i);
    v. findAny() :
              Return the any element of the stream.
                EX:
                   List<Integer> l = Arrays.ofList(1,2,3,4,5);
                 Inetegr i = l.stream()
                    .map(n -> n * 2 )
                    .findAny();
              s.o.p(i);
    vi. max() :
            find maximun element according to comparator.
    vii. min() :
            find maximun element according to comparator.
    viii. anyMatch() :
            Return true if any element satisfy the condition.
              EX:
                boolean b = stream.anyMatch(n -> n%2 ==0);
    ix. allMatch() :
            Return true if all element satisfy the condition.
            EX:
                boolean b = stream.allMatch(n -> n%2 ==0);
    x. nonMatch() :
           Return true if no one element satisfy the condition.
            EX:
                boolean b = stream.nonMatch(n -> n%2 ==0);
    xi. reduce() :
              Reduce the element of stream to single value
            EX: 
              int add = l.stream()
                                .filter(n -> n%2 ==0)
                                .reduce(0,(a,i)->a+i);







                                          


          
                        2. Optional class
                      ``````````````````````
1. Optional is a class that present in package java.util.
    Basically, Optional class is container object that may or may not contain
  null value.
    Primary purpose of Optional class is to reducing the risk of
    nullPointerException and provide more expressive way to handle null value.

2. CHARACTERISTICS AND FEATURES
    i. Nullable container : Optional class is generic type that hold value of 
      type T or indicate that no value is present.
    ii. it reduce risk of NullPointerException.
    iii. Optional object are immutable one created.
    iv. It support operation like map(),filter(),flatMap() to process the 
        value.

3. CREATING OPTIONAL CLASS OBJECT
    i. Creating with a non-null value.
        Optional<String> o = Optional.of("smruti");
    ii. Creating Optional with a null value.
         Optional<String> o = Optional.ofNullable(null);
    iii. Creating empty Optional.
            Optional<String> o = Optional.empty();

      EX:
          class Main{
            public static void main(String args[]){
                String str = "Hello";
                Optional<String> o = Optional.of(str);
                String s = o.get();
                s.o.p(s);
            }
          }

4.BASIC OPERATION ON OPTIONAL
      i.Getting value :
          get() : To retrive data from the Optional object if value
                 id not present it will throw NoSuchElementException 

            EX:
                Optional<String> optional = Optional.of("Hello");
                  String str = optional.get();
                    s.o.p(str);

      ii. isPresent() : 
            This method of optional gives a boolean value if 
        value present true otherwise false.
          Basically,Check value is present or not.
      EX:
          Optional o = Optional.ofNullable("Hello");
            if(o.isPresent()){
              String str = o.get();
            }
            s.o.p(str);

      iii. orElse() :
              Handeling the absence of value.
              If value is not present then it will give a default value.
            EX:
                Optional<String> optional = Optional.empty();
                  String str = optional.orElse("Hello");
                    s.o.p(str);
      
      iv. orElseGet() :
                      To lazily get default value if optional is empty.

      v. orElseThrow() :
                  Used to throws the Exception
              EX:
                  Optional<String> optional = Optional.empty();
                  String str = optional.orElseThrow(
                    () ->  new NoSuchElementException("No Element There"); 
                  );

5. FUNCTIONAL OPERATION ON OPTIONAL 
      I. filter() :
            It will give value if satisfy the condition.
            EX:
                  Optional<String> optional = Optional.of("smruti");
                  Optional<String> str = optional.filter(s -> s.length >= 5);
      II. map() :
            Transfer the value if it present.
            EX:

                  Optional<String> optional = Optional.of("smruti");
                  Optional<Integer> l = optional.map(s -> s.length);
      III. flatMap() : 
                Extension of map it transfer the value and unwrap 
            optional value.
            EX:
                  Optional<String> optional = Optional.of("smruti");
                  Optional<Integer> l = optional.flatMAp(s ->Optional.of(s.length));





                          FUNCTIONAL INTERFACE
                         ```````````````````````
1. Interface which have only one abstract method.
    it can have many default and static method.
    it is declared by using @FunctionalInterface annotaion at class level.
    for functional method we do not need to create any implementaion class
      we can implement using lambda expression.
    
EXAMPLE OF FUNCTIONAL INTERFACE :
    Comparable interface which contain one abstract method
       int compareTo(obj o);

    Runnalbe interface 
      contain void run();
      etc..


Example :
        interface Test{
            void sum(int a,int b);
        }
        Test t = (a, b) -> s.o.p(a+b);
        int c = t.sum(2, 3);
        s.o.p(c);

    o/p: 5


2.BUILT-IN FUNCTIONAL INTERFACE 
I. PREDICATE:
        It is a functional interface which contaion a method 
      which take a argument and return boolean value.

        EX:
           @FunctionalInterface
           interface Predicate<T>{
              public boolean test(T t);
           }
  Basically, it is used when we want to test input 
    satisfy the condition or not.

EXAMPLE: 1.
    class Test{
      public static void main(String args[]){
        Predicate<String> p = s -> s.length() > 0;
        s.o.p(p.test(""));  // give false
        s.o.p(p.test("Hello"));   //give true
      }
    }

      2.
      class Test{
        public static void main(String args[]){
          List<integer> l = Arrays.asList(1,2,3,4);
          Predicate<integer> p = s -> s % 2 == 0;
          List<Integer> l1 = l.stream()
                                  .filter(p)
                                  .collect(Coolecters.toList());
        s.o.p (l1);  //[2,4]
        }
      }

II. Function:
        Function is a functional interface that have a abstract method 
      which take a argument and return result.
    EX:
       interface Function<T, R>{
          public T apply(T t);
       }

EXAMPLE: 1.
    import java.util.function.Function;
    class Test{
      public static void main(String args[]){
        Function<String , Integer> f = s -> s.length();
        s.o.p(f.apply("Hello"));   //give 5
      }
    }

2.
import java.util.function.Function;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

class HelloWorld {
    public static void main(String[] args) {
        Function<String , Integer> f = s -> s.length();
        List<String> l = Arrays.asList("heloo","hii","byy");
        System.out.println(l);
        List<Integer> l1 = l.stream()
                                .map(f)
                                .collect(Collectors.toList());
        System.out.println(l1);
    }
}

III. SUPPLIER:
      functional interface that
      Represent a supplier of result.
          It does not take input and return result.

      EX: 
        @FunctionalInterface
        public interface Supplier<T> {
                T get();
          }      
      EX:
      Supplier<String> s = () -> "Hello";
        s.o.p(s.get());  // print Hello

IV. CONSUME:
          Functional interface that conatin a abstract method accept()
      that take a argument but not return anything ( void ).

    EX: 
        @FunctionalInterface
        public interface Consume<T> {
               void  get(T t);
          }      
      EX:
      consume<String> s = n -> s.o.p(n);
        s.accept("Hello");  // print Hello

      


    

    
  
     
 
            
  


                

            
    
                  
              
 
